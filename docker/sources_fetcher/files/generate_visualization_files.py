#
# This file is part of symfinder.
#
# symfinder is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# symfinder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with symfinder. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2018-2021 Johann Mortara <johann.mortara@univ-cotedazur.fr>
# Copyright 2018-2021 Xhevahire TÃ«rnava <t.xheva@gmail.com>
# Copyright 2018-2021 Philippe Collet <philippe.collet@univ-cotedazur.fr>
#

import os
import shutil

from mako.template import Template

d3_directory = "d3"
base_directory = "generated_visualizations"
projects_directory = "resources"


def copy_file(filename):
    shutil.copyfile(os.path.join(d3_directory, filename), os.path.join(base_directory, filename))


def copy_dir(filename):
    destination_dir = os.path.join(base_directory, filename)
    if os.path.exists(destination_dir):
        shutil.rmtree(destination_dir)
    shutil.copytree(os.path.join(d3_directory, filename), destination_dir)


def generate_visualization_files_for_project(xp_name, xp_config):
    copy_dir("scripts")
    copy_file("style.css")
    copy_file("symfinder-icon.png")
    copy_file("symfinder-legend.svg")
    tags_and_commits = xp_config.get("tagIds", []) + xp_config.get("commitIds", [])
    if tags_and_commits:
        for id in tags_and_commits:
            xp_codename = (xp_name + "-" + str(id)).replace("/", "_")
            generate_visualization_file(xp_codename, xp_config)
            generate_visualization_file_composition(xp_codename, xp_config)
    else:
        generate_visualization_file(xp_name, xp_config)
        generate_visualization_file_composition(xp_name, xp_config)
    generate_index()


def generate_visualization_file(xp_codename, xp_config):
    xp_html_file_path = os.path.join(base_directory, "%s.html" % xp_codename)
    with open(xp_html_file_path, 'w+') as output_file:
        compositionLevel2=1
        compositionType2="IN"
        if("compositionLevel" in xp_config):
            compositionLevel2=int(float(xp_config.get("compositionLevel")))
        if("compositionType" in xp_config):
            compositionType2=str(xp_config.get("compositionType"))

        output_file.write(Template(filename=os.path.join(d3_directory, "template.html")).render(
            title=xp_codename,
            identifier="{} generated by symfinder version {}".format(xp_codename,
                                                                     os.getenv("SYMFINDER_VERSION")),
            jsScriptFile=os.path.join("symfinder.js"),
            filters=",".join(['"' + f + '"' for f in xp_config.get("filters", [])]),
            apiFilters=",".join(['"' + f + '"' for f in xp_config.get("apiFilters", [])]),
            compositionLevel=compositionLevel2,
            compositionType=compositionType2,
            jsonFile=os.path.join("data", "%s.json" % xp_codename),
            jsonStatsFile=os.path.join("data", "%s-stats.json" % xp_codename),
            jsonMetricsFile=os.path.join("data", "%s-metrics.json" % xp_codename))
        )

def generate_visualization_file_composition(xp_codename, xp_config):
    xp_html_file_path = os.path.join(base_directory, "%s-composition.html" % xp_codename)
    with open(xp_html_file_path, 'w+') as output_file:
        compositionLevel1=1
        compositionType1= "IN"
        if("compositionLevel" in xp_config):
            compositionLevel1=int(float(xp_config.get("compositionLevel")))
        if("compositionType" in xp_config):
            compositionType1=str(xp_config.get("compositionType"))

        output_file.write(Template(filename=os.path.join(d3_directory, "templatecomposition.html")).render(
            title=xp_codename,
            identifier="{} generated by symfinder version {}".format(xp_codename,
                                                                     os.getenv("SYMFINDER_VERSION")),
            jsScriptFile=os.path.join("symfinder.js"),
            filters=",".join(['"' + f + '"' for f in xp_config.get("filters", [])]),
            apiFilters=",".join(['"' + f + '"' for f in xp_config.get("apiFilters", [])]),
            compositionLevel=compositionLevel1,
            compositionType=compositionType1,
            jsonFile=os.path.join("data", "%s.json" % xp_codename),
            jsonStatsFile=os.path.join("data", "%s-stats.json" % xp_codename),
            jsonMetricsFile=os.path.join("data", "%s-metrics.json" % xp_codename),
            jsonTracesFile=os.path.join("data", "%s-traces.json" % xp_codename) if xp_config.get("traces", "") else ""))


def generate_index():
    with open(os.path.join(base_directory, "index.html"), 'w+') as index_file:
        xps = {f.split(".html")[0]: f for f in os.listdir(base_directory) if f.endswith(".html") and f != "index.html"}
        index_file.write(Template(filename=os.path.join(d3_directory, "index.html")).render(xps=xps))
